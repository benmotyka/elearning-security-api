export const articlesData = [
  {
    header: {
      pl: "Phishing",
      en: "Phishing",
    },
    description:
    {
      pl: "Phishing jest pewną formą socjotechniki, w której to atakujący, poprzez podszywanie się pod zaufane osoby lub instytucje, próbuje dokonać nieuczciwego przejęcia poufnych informacji od ofiary. Skierowany jest zarówno do zwykłych użytkowników, jak i pracowników organizacji rządowych czy korporacji. Organizacja ulegająca atakowi może nie tylko ponieść poważne straty finansowe, ale również stracić reputację i zaufanie konsumentów. Badanie z 2021 r. firmy Kaspersky Lab, tworzącej popularne oprogramowanie antywirusowe Kaspersky wykazuje, że najpopularniejszymi organizacjami wykorzystywanymi przez phisherów są sklepy, portale internetowe i banki.<br><br>Ataki przeprowadzone mogą być używając psychologicznej manipulacji wybranych osób celem uzyskania ich danych osobowych - forma inżynierii społecznej - albo przy użyciu dostępnych narzędzi informatycznych. Najczęściej występujące rodzaje phishingu to:<ul><li>E-maile phishingowe - spreparowana wiadomość phishingowa wysyłana jest na wiele skrzynek pocztowych, celem zwiększenia prawdopodobieństwa sukcesu ataku. Fałszywe wiadomości mogą zawierać cechy rzekomych organizacji, które miałyby być nadawcami, takie jak logo, stopkę, formatowanie celem skłonienia odbiorców do ujawnienia poufnych informacji, lub wejścia w złośliwe hiperłącze.</li><li>Fałszywa strona internetowa - polega na stworzeniu zwodniczo podobnej kopii strony internetowej poprzez Web Scrapping której celem jest przejęcie wrażliwych danych lub kradzież tożsamości użytkownika końcowego. Adres strony może być rozpowszechniany poprzez wiadomości SMS lub e-mail</li><li> Phishing telefoniczny - przeprowadzany specyficznie za pomocą wiadomości SMS lub połączeń telefonicznych. Numery telefonów potencjalnych ofiar często pozyskiwane są w wyniku wycieków baz danych przedsiębiorstw lub organizacji. Atakujący kontaktując się z ofiarą, może podawać się za znaną osobę lub pracownika zaufanej instytucji, na przykład banku, celem zmanipulowania interlokutora do wykonania określonych akcji.</li><li>Pharming - rodzaj phishingu, który jest znacznie trudniejszy w detekcji. Polega na zainfekowaniu serwera DNS lub urządzenia użytkownika w ten sposób, aby za każdym razem, gdy odwiedzana jest zaufana strona, nastąpiło przekierowanie na złośliwą, spreparowaną stronę internetową.</li></ul>Wektorami ataków phishingowych w większości przypadków są ludzie, a nie urządzenia. Szczególnie zagrożone są osoby niemające na co dzień styczności z Internetem. Dobrym pomysłem jest - tam gdzie to możliwe - stosowanie uwierzytelniania wieloskładnikowego. Polega ono na potwierdzeniu próby autoryzacji poprzez dodatkowy element: kod wysyłany wiadomością SMS lub e-mail. Zapobiega to sytuacjom, w których to dane autoryzacyjne poszkodowanego takie jak adres e-mail i login zostaną użyte przez niewłaściwe osoby. Nie będą one mogły w pełni się uwierzytelnić, jeśli nie posiadają kodu autoryzacyjnego. Dodatkowo może stanowić ostrzeżenie dla ofiary, że ktoś próbuje zalogować się na jej konto. Zaufanym rozwiązaniem są również programy antywirusowe, ostrzegające użytkownika przed fałszywymi domenami oraz odpowiednio skonfigurowane filtry anty-spamowe w poczcie e-mail.<br><br>Należy także uważnie sprawdzać adresy URL stron internetowych, na których podaje się wrażliwe dane. Phisherzy często wykorzystują podobieństwo niektórych cyfr i liter, na przykład '0' i 'o' celem stworzenia złudzenia, że użytkownik znajduje się na właściwej stronie. Istotnym elementem jest również protokół, który użyty został do połączenia ze stroną. Zdecydowana większość organizacji korzysta z ważnych certyfikatów SSL, sprawiając, że połączenie między klientem a serwerem jest szyfrowane (HTTPS).",
      en: "Phishing is a form of social engineering in which the attacker, by impersonating trusted individuals or institutions, attempts to fraudulently acquire confidential information from the victim. It targets both ordinary users and employees of government organizations or corporations. An organization that succumbs to an attack can not only suffer serious financial losses, but also lose reputation and consumer trust. A 2021 study by Kaspersky Lab, makers of the popular Kaspersky anti-virus software, shows that the most popular organizations exploited by phishers are stores, web portals and banks.<br><br>Attacks can be carried out using psychological manipulation of selected individuals to obtain their personal information - a form of social engineering - or by using available computer tools. The most common types of phishing are:<ul><li>E-mail phishing - a crafted phishing message is sent to multiple mailboxes to increase the likelihood of the attack's success. Fake emails may include features of the purported sender organization such as logos, footers, and formatting to induce recipients to disclose sensitive information, or to follow a malicious hyperlink.</li><li>Fake website - involves the creation of a deceptively similar copy of a website through Web Scraping with the goal of acquiring sensitive data or stealing the end user's identity. The website address may be disseminated via SMS or email</li><li>Phone Phishing - conducted specifically via SMS or phone calls. Phone numbers of potential victims are often obtained through leaked databases of companies or organizations. When contacting the victim, the attacker may pretend to be a known person or an employee of a trusted institution, for example a bank, in order to manipulate the interlocutor into performing certain actions.</li><li>Pharming - a type of phishing that is much more difficult to detect. It involves infecting the DNS server or the user's device in such a way that every time a trusted website is visited, a redirection to a malicious, crafted website is made.</li></ul> The vectors of phishing attacks in most cases are people, not devices. People who do not have daily contact with the Internet are particularly at risk. It is a good idea to use multi-factor authentication where possible. It consists in confirming the authorization attempt with an additional element: a code sent via SMS message or e-mail. This prevents situations in which the victim's authorization data, such as e-mail address and login, are used by the wrong people. They will not be able to fully authenticate if they do not have the authorization code. Additionally, it can provide a warning to the victim that someone is trying to log into their account. Antivirus programs that warn the user of fake domains and properly configured email spam filters are also trusted.<br><br>Also, URLs of websites that provide sensitive data should be carefully checked. Phishers often use the similarity of certain numbers and letters, for example '0' and 'o', to create the illusion that the user is on the right page. The protocol used to connect to the site is also an important consideration. The vast majority of organizations use valid SSL certificates, making the connection between the client and the server encrypted (HTTPS)."
    },
    link: "phishing",
  }, 
  {
    header: {
      pl: "Ransomware",
      en: "Ransomware"
    },
    description:
    {
      pl: "Ransomware to typ złośliwego oprogramowania (ang. malware), którego celem jest zablokowanie dostępu do komputera osobistego poprzez zaszyfrowanie wszystkich możliwych plików. Czas trwania tej procedury zależy między innymi od wybranego algorytmu szyfrowania i danych na szyfrowanym urządzeniu, jednak w przypadku zwykłego użytkownika domowego może wykonać się w czasie zaledwie dwóch godzin. Zazwyczaj ten czas jest znacznie dłuższy, gdyż przed rozpoczęciem procesu wymagany jest dokładny rekonesans systemu i struktury katalogów. Tym sposobem użytkownik końcowy traci możliwość odczytu danych na swoim urządzeniu, a do odszyfrowania plików, wymagany jest klucz posiadany przez atakującego.<br><br>Ten rodzaj szkodliwego oprogramowania jest szczególnie niebezpieczny dla przedsiębiorstw, gdyż utrata ważnych dokumentów czy danych finansowych, może się wiązać z poważnymi konsekwencjami, lub brakiem możliwości reakcji na czas (np. złożeniu oferty w terminie). Celem ransomware nie jest usunięcie lub kradzież plików, ale zablokowane ich, i oczekiwanie na ewentualną zapłatę okupu przez ofiarę.<br><br>Wiodącym źródłem pozyskania tego złośliwego oprogramowania jest Remote Desktop Protocol (RDP) - protokół umożliwiający połączenie się z urządzeniem z systemem MS Windows, oraz przejęcie nad nim pełnej kontroli, używany w firmach jako narzędzie do konfiguracji urządzeń.<br><br>Kolejno znajdują się maile phishingowe. Ten sposób zazwyczaj polega na odpowiednim wykorzystaniu inżynierii społecznej, celem zmanipulowania ofiary do udzielenia poufnych danych dostępowych lub uruchomienia oprogramowania szyfrującego na swoim urządzeniu. <br><br> Najlepszą metodą przeciwko tego  jest systematyczne wykonywanie archiwizacji danych. W sytuacji w której ransomware trafi do komputera i zaszyfruje wszystkie pliki, pozostaje jedynie odtworzyć kopię zapasową. Dobrym sposobem jest także częste aktualizowanie systemu operacyjnego, celem eliminowania potencjalnych luk bezpieczeństwa.",
      en: "Ransomware is a type of malicious software (malware) that aims to block access to a personal computer by encrypting all possible files. The duration of this procedure depends on the chosen encryption algorithm and the data on the encrypted device, among other factors, but for a normal home user it can execute in as little as two hours. Usually, this time is much longer, as a thorough reconnaissance of the system and directory structure is required before the process begins. In this way, the end user loses the ability to read data on his device, and in order to decrypt files, a key possessed by the attacker is required.<br><br>This type of malware is particularly dangerous for businesses, because the loss of important documents or financial data, can be associated with serious consequences, or inability to respond in time (e.g. submit an offer on time). The purpose of ransomware is not to delete or steal files, but to lock them, and wait for a possible ransom payment by the victim.<br><br>The leading source of acquisition of this malware is Remote Desktop Protocol (RDP) - a protocol that allows you to connect to a device running MS Windows, and take full control over it, used in companies as a tool to configure devices.<br><br>The next is phishing emails. This method usually involves the appropriate use of social engineering, with the goal of manipulating the victim into giving sensitive access credentials or running encryption software on their device. <br><br> The best method against this is to systematically perform data archiving. In a situation where ransomware gets into your computer and encrypts all your files, all that remains is to restore the backup. It is also a good idea to frequently update the operating system to eliminate potential security vulnerabilities."
    },
    link: "ransomware",
  },
  {
    header: {
      pl: "Keylogger",
      en: "Keylogger"
    },
    description: {
      pl: "Keyloggery występują zazwyczaj w formie złośliwego, ukrytego oprogramowania. Nie są widoczne na pierwszy rzut oka dla użytkownika i w zdecydowanej większości przypadków działają w tle, często podszywając się pod inną aplikację, tym samym maskując swoją obecność.<br><br>Podstawowe właściwości tego typu programu można opisać jako przejmowanie kontroli nad procedurami związanymi z obsługą klawiatury systemu operacyjnego, na którym się znajduje.<br><br>Głównym celem tego oprogramowania jest zbieranie danych o tym, jakie klawisze na klawiaturze zostały naciśnięte przez użytkownika, a następnie okresowe wysyłanie zebranych informacji do atakującego. Posiadając wiedzę na temat tego, co zostało wpisane na urządzeniu, można bez problemu uzyskać dostęp do wrażliwych informacji takich jak prywatna korespondencja czy poufne dane. Do bardziej zaawansowanych funkcji należy między innymi przesyłanie zrzutów ekranu, rejestrowanie historii otwieranych programów i przekazywanie tych informacji dalej.<br><br>Keyloggery oprócz formy programowej istnieją również jako osobne urządzenia, które podłączane są do jednostki zazwyczaj poprzez interfejs USB. Mogą także występować jako urządzenie pośredniczące pomiędzy klawiaturą a złączem USB komputera. <br><br>Sposobem na unikanie tego typu oprogramowania jest przede wszystkim systematyczne sprawdzanie uruchomionych procesów, ale także używanie odpowiedniego antywirusa.",
      en: "Keyloggers usually appear in the form of malicious, hidden software. They are not visible at first glance to the user and in the vast majority of cases they run in the background, often impersonating another application, thus masking their presence.<br><br>The basic properties of this type of program can be described as taking control over the keyboard routines of the operating system on which it resides.<br><br>The main purpose of this software is to collect data about what keys on the keyboard have been pressed by the user and then periodically send the collected information to the attacker. By having knowledge of what was typed on the device, sensitive information such as private correspondence or confidential data can be easily accessed. More advanced features include sending screenshots, recording the history of opened programs and passing this information on.<br><br>Keyloggers, apart from their software form, also exist as separate devices that are connected to the unit usually via USB interface. They can also exist as an intermediary device between the keyboard and the computer's USB connector. <br><br>The way to avoid this type of software is first of all to systematically check the running processes, but also to use an appropriate antivirus."
    },
    link: "keylogger",
  },
  {
    header: {
      pl: "CSRF",
      en: "CSRF"
    },
    description:
    {
      pl: "CSRF jest atakiem na aplikacje internetowe, którego celem jest wykonanie przez użytkownika końcowego niechcianej akcji w serwisie w którym aktualnie jest on zalogowany. Ten typ ataku jest szczególnie wykorzystywany gdy oprogramowanie serwisu internetowego nie jest wykonane zgodnie ze standardami bezpieczeństwa OWASP.<br><br>Warunkiem koniecznym na wystąpienie tej podatności jest aktywna sesja użytkownika w danej witrynie webowej oraz aktywny token autoryzacyjny, uzyskiwany zazwyczaj jako odpowiedź serwera na poprawne dane użytkownika przy mechanizmie logowania na stronie internetowej. Następnie przechowywany jest on w pamięci przeglądarki przez wybrany okres czasu.<br><br>Spreparowane żądanie może być stworzone na wiele sposobów. Dla przykładu, w sytuacji w której klient banku chce wykonać przelew bankowy, utworzone żądanie w podatnej, błędnie wykonanej aplikacji będzie miało następującą formę:<br><br><samp>GET https://bank.com/transfer?amount=100&accountNumber=123456 HTTP/1.1.</samp><br><br>Jeśli dojdzie do sytuacji że w przeglądarce będzie znajdywał się token autoryzacyjny zapisany w ciasteczkach lub pamięci lokalnej, ofiara po wejściu  w hiperłącze <br><br><samp>https://bank.com/transfer?amount=100&accountNumber=123</samp><br><br> nieświadomie wykona to żądanie, co będzie skutkowało przelaniem określonej kwoty pieniędzy na wybrane konto przez atakującego. Link ten może zostać dostarczony poprzez stosowanie odpowiednich środków psychologicznych i metod manipulacji (Inżynierię społeczną) lub maile phishingowe. Aplikacja nie jest w stanie odróżnić czy żądanie od klienta końcowego przyszło zgodne z jego intencjami, czy też nie.<br><br>W dzisiejszych czasach zdecydowana większość frameworków do tworzenia aplikacji webowych posiada mechanizmy zabezpieczające budowaną stronę przed tą podatnością. Jeśli jednak wybrana technologia nie posiada wbudowanego mechanizmu, koniecznym będzie dodanie tokenów CSRF do wszystkich żądań wpływających na stan aplikacji. Z każdym żądaniem do serwera powinien być wysyłany jednorazowy token - ciąg losowych znaków, a następnie powinien być on walidowany wraz z wszystkimi danymi które znajdują się w ciele lub parametrach żądania.",
      en: "CSRF is an attack on web applications that aims to cause an end-user to perform an unwanted action on a website in which they are currently logged in. This type of attack is especially used when the web service software is not made according to OWASP security standards.<br><br>The necessary condition for this vulnerability to occur is an active user session on the given web site and an active authorization token, usually obtained as a server response to valid user credentials at the web site login mechanism. It is then stored in the browser's memory for a selected period of time.<br><br>A crafted request can be created in many ways. For example, in a situation where a bank customer wants to make a bank transfer, the created request in a vulnerable, mis-executed application would be in the following form:<br><br><samp>GET https://bank.com/transfer?amount=100&accountNumber=123456 HTTP/1.1. </samp><br><br>If the browser contains an authorization token stored in cookies or local memory, the victim, after accessing the hyperlinked <br><br><samp>https://bank.com/transfer?amount=100&accountNumber=123</samp><br><br><br>will unknowingly execute this request, which will result in the attacker transferring the specified amount of money to the selected account. This link can be delivered by using appropriate psychological means and manipulation methods (Social Engineering) or phishing emails. The application is not able to distinguish whether the request from the end client came as intended or not.<br><br>Today, the vast majority of web application development frameworks have mechanisms to protect the site under construction from this vulnerability. However, if your chosen technology does not have a built-in mechanism, you will need to add CSRF tokens to all requests affecting the application state. With each request to the server a one-time token should be sent - a string of random characters, and then it should be validated along with all data that are in the request body or parameters."
    },
    link: "csrf",
  },
  {
    header: {
      pl: "Path Traversal",
      en: "Path Traversal"
    },
    description: {
      pl: "Path Traversal to nazwa dla luki bezpieczeństwa aplikacji internetowych, której niedopatrzenie, w procesie tworzenia oprogramowania, może skutkować w wycieku wrażliwych danych z serwera, na którym umieszczona jest aplikacja.<br><br>Dzięki językom programowania działających po stronie serwera takim jak PHP, zewnętrzne skrypty i pliki mogą być dołączane do aplikacji w sposób dynamiczny. Krytycznym elementem w tego typu funkcjonalnościach jest odpowiednio zaimplementowana logika dołączania plików oraz walidacja danych wejściowych, gdyż w przeciwnym wypadku, atakujący może odczytywać zawartość plików lokalnych, jak i zdalnych. Celem tej podatności jest zlokalizowanie i odpowiednie wykorzystanie parametrów przekazywanych do aplikacji, poprzez które dynamicznie dołączane są różne skrypty.<br><br>",
      en: "Path Traversal is the name for a web application security vulnerability that, if not addressed in the development process, can result in the leak of sensitive data from the server that hosts the application.<br><br>Thanks to server-side programming languages such as PHP, external scripts and files can be dynamically appended to applications. A critical element in this type of functionality is properly implemented file attachment logic and input validation, otherwise an attacker can read the contents of local as well as remote files. The goal of this vulnerability is to locate and properly exploit parameters passed to applications through which various scripts are dynamically attached."
    },
    link: "path-traversal",
  },
  {
    header: {
      pl: "Wstrzyknięcie SQL",
      en: "SQL Injection"
    },
    description: {
      pl: "Wstrzyknięcie SQL to podatność aplikacji webowych polegająca na zmodyfikowaniu kwerendy bazodanowej wysyłanej do bazy danych. Celem tego ataku może być uzyskanie informacji, do których w zwyczajnych okolicznościach nie powinno się mieć dostępu: danych personalnych innych użytkowników, ich haseł, numerów kart kredytowych itd. Atak może być wykonany poprzez odpowiednią modyfikację danych wejściowych, np. hasła, produktów w wyszukiwarce, ale także adresu URL. Podatność może również zostać wykorzystana poprzez zastosowanie serwera proxy, czyli serwera pośredniczącego pomiędzy użytkownikiem końcowym a serwerem. Dzięki niemu atakujący może zmodyfikować żądanie wychodzące, tym samym pominąć można wszelką walidację danych wejściowych. <br><br> Ciężko wyobrazić sobie w pełni funkcjonalny serwis internetowy niekorzystający z bazy danych. Proces rejestracji użytkownika, płacenia za zakupy czy zmiana zdjęcia profilowego -- te wszystkie czynności wymagają fizycznego przechowywania informacji. Zazwyczaj realizowane są one poprzez wysłanie odpowiedniego żądania do aplikacji działającej na serwerze, aby ta skomunikowała się z bazą danych i wykonała odpowiednią operację.<br><br>Głównym powodem występowania podatności SQL Injection jest zbyt mała uwaga poświęcona tworzeniu kwerend bazodanowych. Parametry przekazywanego do zapytania powinny być filtrowane pod kątem występowania specjalnych symboli, lub pod względem wystąpienia w parametrze określonych znaków, tj. wyłącznie litery i cyfry.<br><br>Przy komunikacji z relacyjną bazą danych, dobrym rozwiązaniem może być stosowanie takich narzędzi jak Konstruktora Zapytań (ang. Query Builder) lub ORM (ang. Object-Relational Mapping) pozwala na uproszczenie komunikacji z bazą danych poprzez mapowanie tabel i relacji do obiektów, oraz eliminację możliwości wystąpienia takich luk bezpieczeństwa jak SQL Injection. Jako przykład Konstruktora zapytań można podać Knex.js - biblioteka o otwartych źródłach stworzona dla środowiska uruchomieniowego Node.js. Kwerendy tworzone w konstruktorach nie tylko są bezpieczniejsze niż zapytania SQL - są także uniwersalne dla każdego silnika bazodanowego.<br><br>SQL Injection jest luką bezpieczeństwa która może stanowić poważne zagrożenie nie tylko dla systemu bazodanowego, ale również dla całego przedsiębiorstwa. Przy braku odpowiedniej walidacji danych wejściowych można doprowadzić do sytuacji, w której to atakujący uzyska dostęp do poufnych informacji, lub nawet usunie część bazy danych. Mimo tego, iż należy do stosunkowo prostych podatności w egzekucji, a jej początki sięgają roku 1998, wciąż stanowi ona jedną z najbardziej pospolitych i niebezpiecznych podatności aplikacji działających po stronie serwera.",
      en: "SQL injection is a web application vulnerability that involves modifying a database query sent to a database. The purpose of this attack may be to obtain information that under normal circumstances should not be accessed: other users' personal data, passwords, credit card numbers, etc. The attack can be executed by appropriately modifying input data, e.g. a password, products in a search engine, but also a URL. The vulnerability can also be exploited by using a proxy server, which is an intermediary between the end user and the server. It allows the attacker to modify the outgoing request, thus bypassing any input validation. <br><br>It is hard to imagine a fully functional Web site that does not use a database. The process of registering a user, paying for purchases, or changing a profile picture -- all of these activities require physical storage of information. They are usually realized by sending a request to the application running on the server, so that it communicates with the database and performs the appropriate operation.<br><br>The main reason why SQL Injection vulnerability occurs is because too little attention is paid to creating database queries. The parameters passed to the query should be filtered for special symbols, or for the occurrence of specific characters in the parameter, i.e. only letters and numbers.<br><br>When communicating with a relational database, it can be a good idea to use tools such as Query Builder or ORM (Object-Relational Mapping) to simplify communication with the database by mapping tables and relationships to objects, and eliminate the possibility of security vulnerabilities such as SQL Injection. As an example of a Query Builder, consider Knex.js, an open-source library created for the Node.js runtime environment. Queries created in query builders are not only more secure than SQL queries - they are also universal to any database engine.<br><br>SQL Injection is a security vulnerability that can pose a serious threat not only to the database system, but also to the entire enterprise. Without proper validation of input data, it can lead to a situation where an attacker can gain access to confidential information, or even delete part of the database. Despite the fact that it is a relatively simple vulnerability to execute and its origins date back to 1998, it is still one of the most common and dangerous vulnerabilities in server-side applications."
    },
    link: "sql-injection",
  },
  /*
  {
    language: "pl",
    header: "Pharming",
    description: "TODO.",
    link: "pharming",
  },
  {
    language: "pl",
    header: "ARP Poisoning",
    description:
      "Atak typu Man in the Middle (MitM), umożliwiający atakującemu przechwycenie komunikacji między urządzeniami sieciowymi.",
    link: "arp-poisoning",
  },
  {
    language: "pl",
    header: "Snooping",
    description: "TODO.",
    link: "snooping",
  },
  {
    language: "pl",
    header: "Man in the Middle",
    description:
      "Atak typu MITM to określenie na sytuację, w której sprawca pośredniczy w komunikacji aplikacji z użytkownikiem końcowym - albo po to, by podsłuchiwać, albo podszywać się pod jedną ze stron, co sprawia wrażenie normalnej wymiany informacji jest w toku.",
    link: "mitm",
  },
  {
    language: "pl",
    header: "Atak Smurf",
    description:
      "Atak smurf to forma rozproszonego ataku typu DDOS, który ma miejsce w warstwie sieci. Ataki smurfingowe noszą nazwę od złośliwego oprogramowania Smurf, które umożliwia atakującym ich wykonanie.",
    link: "smurf-attack",
  },
  {
    language: "pl",
    header: "Spoofing",
    description: "TODO.",
    link: "spoofing",
  },
  {
    language: "pl",
    header: "Atak XSS",
    description: "Cross-site scripting (XSS) jest jedną z najbardziej niebezpiecznych podatności współczesnych aplikacji webowych. XSS jest atakiem skierowanym na klienta korzystającego serwisu webowego, w przeciwieństwie do np. SQL Injection, którego celem jest aplikacja działająca po stronie serwera. Cross-site scripting opiera się głównie na wstrzyknięciu do strony internetowej złośliwego skryptu, który, dla przykładu, może odczytać ciasteczka użytkownika lub inne poufne informacje, które przechowuje przeglądarka, wysłać je do atakującego, aby ten -- używając zapisanych w ciasteczkach danych -- mógł zalogować się na konto użytkownika, który nieświadomie uruchomił dany skrypt. Poprzez ten atak, można również uruchomić Keyloggera działającego w przeglądarce, lub całkowicie zmienić zawartość strony internetowej.<br><br>W raporcie przygotowanym w 2017 roku przez Wordfence, komercyjną organizację zajmującą się zabezpieczaniem stron internetowych przed wszelkimi niebezpieczeństwami, wynika, iż ten typ podatności stanowi blisko połowę wszystkich podatności w sieci.<br><br>Opisując XSS nie sposób nie wspomnieć o Regule tego samego pochodzenia (Same-origin policy). Jest to jeden z wielu fundamentalnych mechanizmów bezpieczeństwa, zaimplementowany w każdej przeglądarce internetowej. Nie pozwala on żadnej stronie na podjęcie akcji lub odczytania zawartości innej strony, na przykład w dwóch kartach przeglądarki. W związku z tym, wszystko, co się dzieje na stronie internetowej otwartej przez użytkownika, jest izolowane i nie będzie miało wpływu na pozostałe otwarte strony.<br><br>Cała struktura strony internetowej zakodowana językiem HTML może być zmieniana poprzez JavaScript, używając DOM API. Jako rezultat, prosty skrypt może całkowicie zmienić zawartość, wygląd, a przede wszystkim funkcjonalność strony internetowej.<br><br>Ciasteczkami (ang. cookies) nazywa się niewielkie informacje wysyłane przez serwer do przeglądarki internetowej urządzenia końcowego. Służą temu, by zapisać obiekty danych w przeglądarce, które przy ponownym odwiedzeniu strony, mogą być przesłane do tego samego serwera, z którego przyszły. W związku z tym, przy odwiedzaniu różnorakich stron wymagających autoryzacji, użytkownik nie musi się za każdym razem logować, gdyż wszystkie potrzebne dane są zawarte w ciasteczkach, które przesyłane są razem z żądaniem.<br><br>Ataki XSS można podzielić na trzy główne kategorie:<ul><li>Reflected XSS - złośliwy skrypt umieszczony jest w adresie URL. Po wejściu w hiperłącze, ofiara nieświadomie wykonuje wcześniej przygotowany skrypt, rezultatem czego jest wykonanie kodu w przeglądarce.</li><li>Stored XSS - polega na umieszczeniu skryptu po stronie serwera, przykładowo jako wiadomość w serwisie społecznościowym. Po odczytaniu jej przez ofiarę, automatycznie wykonywany jest wcześniej przygotowany skrypt, co może skutkować wysłaniem ciasteczka sesyjnego innego użytkownika do atakującego, pozwalając mu na umieszczenie skradzionego ciasteczka w przeglądarce i nieautoryzowany dostęp do konta ofiary.</li><li>DOM Based XSS - atak ściśle powiązany z modyfikacją struktury DOM. Sama odpowiedź HTTP nie ulega zmianie, jednak kod po stronie klienta zawarty w aplikacji wykonywany jest w inny sposób z powodu modyfikacji, które miały miejsce w środowisku DOM.</li></ul>Najczęstszym miejscem, w którym można spotkać tę podatność, są formularze, do których użytkownik wpisuje treść, która następnie jest wyświetlana. Jeśli treść którą przesłał użytkownik nie zostanie odpowiednio wyczyszczona, może dojść do sytuacji, w której to użytkownik wstrzyknie złośliwy skrypt.<br><br>Przeglądarki internetowe zostały wyposażone wiele narzędzi do walki z tą podatnością, takich jak system wykrywania złośliwego kodu JavaScript. Mechanizm ten składa się z wbudowanego w przeglądarkę komponentu analizy skryptów oraz systemu IDS (ang. Intrusion Detection System), przetwarzającego aktywność po stronie klienta, i porównującego ją ze znanymi złośliwymi skryptami. Dzięki temu systemowi możliwe jest wykrywanie różnego rodzaju ataków XSS. Jednak system ma znaczną wadę: może wykryć tylko sytuacje, których zachowanie jest mu znane -- nie jest odporny na nowe typy ataku.<br><br>Pomimo wielu zabezpieczeń, które są wbudowane w przeglądarki, te nie są w stanie odróżnić czy dany skrypt jest złośliwy, czy nie - dlatego też odporność aplikacji internetowej na tego typu atak stoi przede wszystkim po stronie programistów.<br><br>Najskuteczniejszą ochroną przed atakami XSS jest filtrowanie danych przychodzących od użytkownika przed tym, kiedy to mają zostać wyświetlone w aplikacji, na przykład poprzez zamianę znaków tagów HTML na znaki specjalne. Skutecznym rozwiązaniem może być także oczyszczanie wprowadzonej treści użytkownika z elementów wspólnych dla każdego ataku XSS, na przykład tagów &lt;script&gt;&lt;/script&gt;.",
    link: "xss",
  },
  {
    language: "en",
    header: "XSS attack",
    description: "Cross-site scripting (XSS) is one of the most dangerous vulnerabilities of modern web applications. XSS is an attack directed at the client using a web service, in contrast to e.g. SQL Injection, which targets the server-side application. Cross-site scripting is mainly based on injecting a malicious script into a web page, which, for example, can read a user's cookies or other sensitive information stored in the browser, send it to an attacker so that the attacker -- using the cookie data -- can log into the account of the user who unknowingly ran the script. Through this attack, it is also possible to run a Keylogger running in the browser, or completely change the content of a website.<br><br>A report prepared in 2017 by Wordfence, a commercial organization dedicated to securing websites from all kinds of dangers, shows that this type of vulnerability accounts for nearly half of all vulnerabilities on the web.<br><br>While describing XSS, it is impossible not to mention the Same-origin policy. It is one of many fundamental security mechanisms, implemented in every web browser. It does not allow any page to take an action or read the content of another page, for example in two browser tabs. Therefore, anything that happens on a web page opened by a user is isolated and will not affect the other pages opened.<br><br>The entire structure of an HTML-encoded web page can be changed through JavaScript, using the DOM API. As a result, a simple script can completely change the content, appearance, and most importantly, the functionality of a web page.<br><br>Cookies are called small pieces of information sent by a server to an end device's web browser. They are used to save data objects in the browser, which when you visit the site again, can be sent to the same server from which they came. As a result, when visiting various sites that require authentication, the user does not need to log in every time because all the necessary data is contained in cookies that are sent along with the request.<br><br>XSS attacks can be divided into three main categories:<ul><li>Reflected XSS - a malicious script is placed in the URL. After entering the hyperlink, the victim unknowingly executes a pre-prepared script, resulting in code execution in the browser.</li><li>Stored XSS - involves placing the script on the server side, for example as a message on a social networking site. When the victim reads it, a previously prepared script is automatically executed, which can result in another user's session cookie being sent to the attacker, allowing them to place the stolen cookie in the browser and gain unauthorized access to the victim's account.</li><li>DOM Based XSS - an attack closely related to modifying the DOM structure. The HTTP response itself is not changed, but the client-side code in the application is executed in a different way due to the modifications that took place in the DOM environment.</li></ul> The most common place where this vulnerability can be found is in forms, where the user enters content that is then displayed. If the content that the user has submitted is not properly sanitized, a situation can arise where the user injects a malicious script.<br><br>Browsers have been equipped with many tools to combat this vulnerability, such as the JavaScript Malicious Code Detection System. This mechanism consists of the browser's built-in script analysis component and the Intrusion Detection System (IDS), which processes client-side activity and compares it with known malicious scripts. This system makes it possible to detect various types of XSS attacks. However, the system has a significant drawback: it can only detect situations whose behavior is known to it -- it is not immune to new types of attack.<br><br>Despite many security features that are built into browsers, browsers cannot distinguish whether a given script is malicious or not -- so the resistance of a web application to this type of attack is primarily on the developers' side.<br><br>The most effective protection against XSS attacks is to filter incoming data from the user before it should be displayed in the application, for example by replacing HTML tag characters with special characters. It can also be effective to sanitize user input from elements common to any XSS attack, such as the &lt;script&gt;&lt;/script&gt; tags.",
    link: "xss",
  },
  {
    language: "en",
    header: "Denial of service",
    description: "The targets of Denial Of Service (DoS) blocking are usually small to medium sized websites. This attack involves making so many requests to a server in a unit time that it stops responding. They are relatively simple to execute and can cause serious damage to networks and computer systems. Most attacks of the type are based on vulnerabilities in the TCP protocol, leading to attacks such as TCP SYN Flood DoS<br><br>The type of DOS can vary depending on the OSI model layer at which the packets are sent. The main types of this attack include SYN Flood, HTTP Flood, and Smurf Attack.<br><br>When a client wants to connect to a server, the two machines sequentially exchange a set of messages, also known as 3-Way Handshake<ol><li>In the first step, the client sends a segment with SYN (Synchronize Sequence Number). Synchronize Sequence Number), which tells the server that the client is likely to start communication and with what sequence number it is starting the segments.</li><li>The next step is for the server to respond to the client's request with the SYN-ACK signal bits set. The acknowledge (ACK) is the response the segment has received, and the SYN indicates with what sequence number the segments are likely to start.</li><li>In the final part, the client acknowledges the server's response and the two establish a connection where it will begin the actual data transfer.</li></ol>SYN Flood involves an abuse of the procedure described above. Attacker sends a wave of SYN messages to the server, using crafted IP addresses. Unaware server responds to the request with SYN-ACK message and waits for ACK response from client to finalize the three-step handshake. Due to the fact that the server is waiting for the message with the fake IP addresses to complete, the connection will never happen. The effect is to overload the connection queue and eventually the server's RAM, causing unresponsive requests from normal users.<br><br>Blocking a given IP address from which many requests come in a short period of time is not much of a problem for firewalls, which is why DDOS - Distributed Denial-Of-Service - attacks are becoming more common. The difference is that the requests are sent from multiple locations simultaneously, making it much more difficult for the firewall to identify and block the sudden traffic.<br><br>Fast detection of unnatural server load is critical to protecting against DDOS attacks. For enterprises, it also involves providing an acceptable quality of service to customers. There are many solutions to detect the above described incident. They can be divided according to the way they work and the complexity of detection. The most effective solutions include statistical analysis of traffic, fuzzy logic, the use of artificial neural networks or techniques for exploring hidden dependencies in data repositories.<br><br>Denial of Service attacks pose a much greater threat to the classical model of website hosting, which uses physical servers to ensure the availability of the service. In a situation where the application load increases, for example as a result of this attack, the only solution is filtering and rejecting potential malicious requests - there is no option to quickly increase resources.<br><br>Nowadays a much better solution, both in terms of money and simplicity, are public clouds, such as AWS (Amazon Web Services), Microsoft Azure or GCP (Google Cloud Platform). Their rich offerings provide basic services such as dedicated servers, virtual networks and network interfaces, or data storage services. In addition, clouds offer services of advanced mechanisms for counteracting DDOS-type attacks. An example is the AWS cloud functionality in the form of auto-scaling group. This service adjusts the number of server instances depending on the current traffic. So under normal conditions, when the server load is at a low level, there may be one server instance in the group. As soon as a specific resource exceeds a pre-declared value, for example, CPU resources reach 80% of available resources in a minute period, another server instance is automatically created based on the original one. Thus, the network traffic will be distributed between two servers, instead of one.<br><br>A good solution for this type of attack can also be the use of load balancing system - load balancer. This is a mechanism, used in web services that use a larger number of server instances. As a result, each connection is redirected to one of the available servers according to the following algorithms:<ul><li>Round Robin - the incoming request will be redirected to each server in turn. When it reaches the end, the load balancer will loop back.</li><li>Least Connections - Load Balancer will send the request to one of the servers that are currently processing the least number of requests.</li><li>IP Hash - the request will be directed to the nearest server by geolocation.</li></ul> DOS attacks are a direct threat to web application availability. If malicious traffic is large enough and not identified quickly, it can easily contribute to a website being shut down indefinitely. With many readily available tools such as load balancing systems, auto-scaling groups, and firewalls, protecting against this type of threat has become much easier than ever.",
    link: "ddos",
  },
  {
    language: "pl",
    header: "Blokada usług",
    description: "Celem Blokady usług (ang. Denial Of Service) są zazwyczaj serwisy internetowe małych i średnich przedsiębiorstw. Atak ten polega na wykonaniu tak wielu żądań do serwera w jednostkowym czasie, aby ten przestał odpowiadać. Są relatywnie proste w egzekucji i mogą być powodem poważnych strat dla sieci i systemów komputerowych. Większa część ataków typu odbywa się w oparciu o luki w protokole TCP, co prowadzi do takich ataków jak TCP SYN Flood DoS<br><br>Rodzaj DOS może różnić się w zależności od warstwy modelu OSI, na której wysyłane są pakiety. Do głównych rodzajów tego ataku zaliczyć można SYN Flood, HTTP Flood, Smurf Attack.<br><br>W momencie, w którym klient chce nawiązać połączenie z serwerem, obie maszyny sekwencyjnie wymieniają zestaw komunikatów, znany także jako uzgadnianie trój-etapowe - 3-Way Handshake<ol><li>W pierwszym kroku klient wysyła segment z SYN (ang. Synchronize Sequence Number), który informuje serwer, że klient prawdopodobnie rozpocznie komunikację i z jakim numerem sekwencyjnym uruchamia segmenty.</li><li>Kolejno serwer odpowiada na żądanie klienta z ustawionymi bitami sygnału SYN-ACK. Potwierdzenie (ACK) to odpowiedź segmentu, który otrzymał, a SYN oznacza, z jakim numerem sekwencji prawdopodobnie rozpoczną się segmenty.</li><li>W końcowej części klient potwierdza odpowiedź serwera i oboje ustanawiają połączenie, w którym rozpocznie rzeczywisty transfer danych.</li></ol>SYN Flood polega na nadużyciu wyżej opisanej procedury. Atakujący przesyła do serwera falę komunikatów SYN, używając spreparowanych adresów IP. Niczego nieświadomy serwer odpowiada na żądania komunikatem SYN-ACK, po czym oczekuje na odpowiedź ACK od klienta celem sfinalizowania uzgodnienia trój-etapowego. Z racji faktu, iż serwer oczekuje na zakończenie komunikatu z fałszywymi adresami IP, połączenie to nigdy nie dojdzie do skutku. Efektem tego jest przeładowanie kolejki połączeń i ostatecznie pamięci operacyjnej serwera, powodując brak odpowiedzi na żądania zwykłych użytkowników.<br><br>Blokada danego adresu IP, z którego przychodzi wiele żądań w krótkim okresie czasu, nie stanowi większego problemu dla firewalli, dlatego też coraz powszechniejszymi stają się ataki DDOS - Distributed Denial-Of-Service. Różnica polega na tym, że żądania wysyłane są z wielu lokacji jednocześnie, co znacznie bardziej utrudnia identyfikację i zablokowanie nagłego ruchu przez zaporę ogniową.<br><br>Szybka detekcja nienaturalnego obciążenia serwera ma kluczowe znaczenie dla ochrony przed atakiem DDOS. W przypadku przedsiębiorstw wiąże się to także z zapewnieniem akceptowalnej jakości usług dla klientów. Istnieje wiele rozwiązań, które pozwalają wykrywać powyżej opisany incydent. Można je podzielić według sposobu ich działania i złożoności wykrywania. Do najskuteczniejszych rozwiązań należy analiza statystyczna ruchu, logika rozmyta, stosowanie sztucznych sieci neuronowych czy techniki eksploracji ukrytych zależności w repozytoriach danych.<br><br>Ataki Denial of Service stanowią zdecydowanie większe zagrożenie dla klasycznego modelu hostingu strony webowej, w którym celem zapewnienia dostępności serwisu korzysta się z fizycznych serwerów. W sytuacji, w której obciążenie aplikacji wzrośnie, przykładowo na skutek omawianego ataku, jedynym rozwiązaniem jest filtrowanie i odrzucanie potencjalnych złośliwych żądań - nie ma opcji na szybkie zwiększenie zasobów.<br><br>W dzisiejszych czasach zdecydowanie lepszym rozwiązaniem zarówno pod kątem finansowym, jak i prostoty są publiczne chmury obliczeniowe, takie jak AWS (ang. Amazon Web Services), Microsoft Azure lub GCP (ang. Google Cloud Platform). Ich bogata oferta zapewnia podstawowe usługi takie jak dedykowane serwery, wirtualne sieci i interfejsy sieciowe czy usługi przechowywania danych. Ponadto chmury oferują usługi zaawansowanych mechanizmów przeciwdziałania atakom typu DDOS. Przykładem może być funkcjonalność chmury AWS w postaci grupy auto-skalującej (ang. auto-scaling group). Usługa ta dostosowuje liczbę instancji serwerowych w zależności od aktualnie panującego ruchu. Tak więc przy normalnych warunkach, gdy obciążenie serwera jest na niskim poziomie, w grupie może znajdować się jedna instancja serwerowa. Gdy tylko określony zasób przekroczy wcześniej zadeklarowaną wartość, na przykład zasoby procesora osiągną 80% dostępnych zasobów w okresie minuty, automatycznie zostanie stworzona kolejna instancja serwerowa na podstawie pierwotnej. Tym samym ruch sieciowy zostanie rozłożony pomiędzy dwa serwery, zamiast jednego.<br><br>Dobrym rozwiązaniem na tego typu ataki może być również użycie systemu równoważenia obciążenia - load balancera. Jest to mechanizm, wykorzystywany w serwisach internetowych korzystających z większej ilości instancji serwerowych. W rezultacie każde połączenie jest przekierowane do jednego z dostępnych serwerów według następujących algorytmów:<ul><li>Round Robin - nadchodzące żądanie zostanie przekierowane do każdego serwera po kolei. Gdy dojdzie do końca, system równoważenia obciążenia zapętli się z powrotem.</li><li>Least Connections - Load Balancer prześle żądanie do jednego z serwerów, które aktualnie procesują najmniejszą ilość żądań.</li><li>IP Hash - żądanie zostanie skierowane do najbliższego serwera pod kątem geolokalizacji.</li></ul>Ataki DOS są bezpośrednim zagrożeniem dla dostępności aplikacji webowych. Jeśli złośliwy ruch jest odpowiednio duży i nie zostanie szybko zidentyfikowany, może z łatwością przyczynić się do wyłączenia strony internetowej na nieokreślony czas. Dzięki wielu łatwo dostępnym narzędziom, takim jak systemy równoważenia obciążenia, grupy auto-skalujące, firewalle, ochrona przed tego typu zagrożeniem stała się dużo łatwiejsza niż kiedykolwiek.",
    link: "ddos",
  },
  {
    language: "pl",
    header: "Spyware",
    description:
      "To rodzaj złośliwego oprogramowania które instalowane jest na urządzeniu ofiary bez jej wiedzy. Pozyskuje wrażliwe informacje, takie jak dane dotyczące korzystania z przeglądarki internetowej, a następnie przekazuje je atakującemu.",
    link: "spyware",
  },
  {
    language: "pl",
    header: "Backdoor",
    description:
      "Jest złośliwym oprogramowaniem które omija procedury uwierzytelniania celem uzyskania dostępu do systemu na którym istnieje. W rezultacie, dostęp do wrażliwych zasobów, takich jak bazy danych czy serwery plików w pewnym miejscu nie wymaga autoryzacji. Daje to możliwość atakującym zdalnego wydawania poleceń systemowych.",
    link: "backdoor",
  },
  {
    language: "pl",
    header: "Hijackware",
    description:
      "Hijackware infekuje przeglądarke internetową w celu wyświetlania reklam lub przekierowania ofiar na złośliwe strony. Zazwyczaj przejmuje również kontrolę nad ustawieniami przeglądarki i je modyfikuje.",
    link: "hijackware",
  },
  {
    language: "pl",
    header: "Robak",
    description: "TODO.",
    link: "worm",
  },
  {
    language: "en",
    header: "Worm",
    description: "TODO.",
    link: "worm",
  },
  */
];
